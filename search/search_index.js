var __index = {"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":"<p>Build this documentation: <pre><code>$ docker run --rm -it -p 8008:8000 --user $(id -u):$(id -g) -v ${PWD}/my-project:/docs squidfunk/mkdocs-material build\n</code></pre></p>"},{"location":"contact.html","title":"Contact","text":"<p>Get in contact: randomate (a) posteo (dot) net</p>"},{"location":"Android/Firefox-and-SelfCA.html","title":"Firefox And SelfCA","text":"<p>How to allow selfsigned CA in Firefox for Android</p>","tags":["certificate","certificate-authority","firefox","lang-en","security","selfca","selfsigned"]},{"location":"Android/Firefox-and-SelfCA.html#howto","title":"Howto","text":"<ol> <li>Go to Firefox settings</li> <li>Go to \"About Firefox\"</li> <li>Tap the Firefox logo multiple times (normally seven)</li> <li>Back to settings level -&gt; open \"Secret Settings\"</li> <li>Enable \"Use third party CA certificates\"</li> <li>Restart the app</li> </ol>","tags":["certificate","certificate-authority","firefox","lang-en","security","selfca","selfsigned"]},{"location":"Coding/ESP-IDF-with-WolfSSL.html","title":"ESP-IDF with WolfSSL","text":"<p>Using WolfSSL with ESP32 in ESP-IDF is not magic. In this post I will show you how to setup WolfSSL with ESP-IDF and provide an example for encryption and decryption. Also with splitted bytes[] input.</p>","tags":["decryption","encryption","esp-idf","esp32","espressif","lang-en","wolfcrypt","wolfssl"]},{"location":"Coding/ESP-IDF-with-WolfSSL.html#how-to-install","title":"How to install","text":"<p>There are two options to install WolfSSL for ESP-IDF:</p> <ol> <li>Install WolfSSL for ESP-IDF: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/protocols/esp_tls.html#how-to-use-wolfssl-with-esp-idf<ol> <li>Clone repository</li> <li>Execute setup.sh from <code>IDE/Espressif/ESP-IDF</code></li> <li>Modify <code>EXTRA_COMPONENT_DIRS</code> in <code>CMakeLists.txt</code> with the component path. For example <code>${ESP_INSTALL}/esp/esp-idf/components/wolfssl/</code></li> </ol> </li> <li>Install WolfSSL for ESP-IDF from WolfSSL: https://github.com/wolfSSL/wolfssl/tree/master/IDE/Espressif/ESP-IDF<ol> <li>Clone repository</li> <li>Execute setup.sh from <code>IDE/Espressif/ESP-IDF</code></li> <li>Modify <code>EXTRA_COMPONENT_DIRS</code> in <code>CMakeLists.txt</code> with the component path. For example <code>${ESP_INSTALL}/esp/esp-idf/components/wolfssl/</code></li> </ol> </li> </ol>","tags":["decryption","encryption","esp-idf","esp32","espressif","lang-en","wolfcrypt","wolfssl"]},{"location":"Coding/ESP-IDF-with-WolfSSL.html#example-code","title":"Example code","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;inttypes.h&gt;\n#include &lt;wolfssl/wolfcrypt/aes.h&gt;\n\nvoid app_main(void)\n{\n\n    Aes enc;\n    Aes dec;\n\n    /**\n     * Plain: 72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72:72\n     * Cipher: 85:82:76:E5:5C:30:E1:F4:90:07:C8:72:A6:9E:3C:63:CD:02:B5:15:F3:2E:2A:47:E4:B6:06:B4:78:9B:28:E8\n    */\n\n    // IMPORTANT DO NOT USE THIS INSECURE KEY AN IV!\n    const byte key_b[] = {  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                            0x00, 0x00, 0x00, 0x00  };\n    const byte iv_b[]  = {  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00  };\n\n    byte plain_b[32]   =  {  0x72, 0x73, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,\n                             0x72, 0x74, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,\n                             0x72, 0x75, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,\n                             0x72, 0x76  };\n\n    byte cipher_b[32];\n    byte decrypted_b[32];\n\n    byte plain11_b[16];\n    byte plain12_b[16];\n    byte cipher11_b[16];\n    byte cipher12_b[16];\n    byte decrypted11_b[16];\n    byte decrypted12_b[16];\n\n    wc_AesSetKey(&amp;enc, key_b, sizeof(key_b), iv_b, AES_ENCRYPTION);\n    wc_AesCbcEncrypt(&amp;enc, cipher_b, plain_b, sizeof(plain_b));\n\n    memcpy(plain11_b, plain_b, sizeof(plain_b[0])*(16));\n    memcpy(plain12_b, &amp;plain_b[16], sizeof(plain_b[0])*(16));\n\n    wc_AesSetKey(&amp;enc, key_b, sizeof(key_b), iv_b, AES_ENCRYPTION);\n    wc_AesCbcEncrypt(&amp;enc, cipher11_b, plain11_b, sizeof(plain11_b));\n    wc_AesCbcEncrypt(&amp;enc, cipher12_b, plain12_b, sizeof(plain12_b));\n\n    wc_AesSetKey(&amp;dec, key_b, sizeof(key_b), iv_b, AES_DECRYPTION);\n    wc_AesCbcDecrypt(&amp;dec, decrypted_b, cipher_b, sizeof(cipher_b));\n\n    wc_AesSetKey(&amp;dec, key_b, sizeof(key_b), iv_b, AES_DECRYPTION);\n    wc_AesCbcDecrypt(&amp;dec, decrypted11_b, cipher11_b, sizeof(cipher11_b));\n    wc_AesCbcDecrypt(&amp;dec, decrypted12_b, cipher12_b, sizeof(cipher12_b));\n\n    int i;\n    printf(\"Plain         : \");\n    for (i = 0; i &lt; sizeof(plain_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", plain_b[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Plain1112     : \");\n    for (i = 0; i &lt; sizeof(plain11_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", plain11_b[i]);\n    }\n    printf(\"|\");\n    for (i = 0; i &lt; sizeof(plain12_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", plain12_b[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Cipher        : \");\n    for (i = 0; i &lt; sizeof(cipher_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", cipher_b[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Cipher1112    : \");\n    for (i = 0; i &lt; sizeof(cipher11_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", cipher11_b[i]);\n    }\n    printf(\"|\");\n    for (i = 0; i &lt; sizeof(cipher12_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", cipher12_b[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Decrypted     : \");\n    for (i = 0; i &lt; sizeof(decrypted_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", decrypted_b[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Decrypted1112 : \");\n    for (i = 0; i &lt; sizeof(decrypted11_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", decrypted11_b[i]);\n    }\n    printf(\"|\");\n    for (i = 0; i &lt; sizeof(decrypted12_b); i++)\n    {\n        if (i &gt; 0) printf(\":\");\n        printf(\"%02X\", decrypted12_b[i]);\n    }\n    printf(\"\\n\");\n}\n</code></pre>","tags":["decryption","encryption","esp-idf","esp32","espressif","lang-en","wolfcrypt","wolfssl"]},{"location":"Haushalt/Getreidesorten.html","title":"Getreidesorten","text":"<p>Beim Brotbacken ist Gluten ein wichtiger Bestandteil f\u00fcr die Festigkeit und Lockerheit des fertigen Brotes. Die \u00dcbersicht soll helfen, die richtige Mischung von verschiedenen Getreidesorten zu finden.</p>","tags":["backen","getreide","getreidesorten","gluten","lang-de"]},{"location":"Haushalt/Getreidesorten.html#glutenanteile","title":"Glutenanteile","text":"Getreidesorte Art Glutenanteil / 100 g Roggen ganzes Korn 3,117 mg Roggenmehl Typ 997 3,180 mg Roggenmehl Typ 815 3,200 mg Roggenmehl Typ 1370 3,300 mg Roggenschrot Vollkorn 3,450 mg Roggenmehl Typ 1150 3,483 mg Hafer ganzes Korn, entspelzt 4,557 mg Weizenkleie -- 4,660 mg Gerstengraupen -- 4,700 mg Hafergr\u00fctze -- 4,850 mg Hafermehl Vollkorn 5,600 mg Gerste ganzes Korn, entspelzt 5,624 mg Haferflocken -- 5,660 mg Gr\u00fcnkern ganzes Korn 7,100 mg Weizenmehl Typ 550 7,520 mg Weizen ganzes Korn 7,700 mg Weizenmehl Vollkorn 8,300 mg Weizenmehl Typ 405 8,660 mg Weizengrie\u00df -- 8,680 mg Weizenmehl Typ 1050 8,740 mg Gr\u00fcnkernmehl Vollkorn 8,975 mg Weizenmehl Typ 630 9,359 mg Weizenmehl Typ 812 9,420 mg Dinkelmehl Vollkorn 9,460 mg Dinkel ganzes Korn 9,894 mg Dinkelmehl Typ 630 10,300 mg","tags":["backen","getreide","getreidesorten","gluten","lang-de"]},{"location":"Haushalt/Getreidesorten.html#quellen","title":"Quellen","text":"<ul> <li>Wikipedia Gluten</li> <li>Wikipedia Gluteline</li> <li>Deutsche Forschungsanstalt f\u00fcr Lebensmittelchemie, Garching (Hrsg,): Lebensmitteltabelle f\u00fcr die Praxis, Der kleine Souci \u00b7 Fachmann \u00b7 Kraut, 4, Auflage, Wissenschaftliche Verlagsgesellschaft mbH, Stuttgart 2009, ISBN 978-3-8047-2541-6, S, 241,</li> <li>Glutengehalt Getreide Bier</li> </ul>","tags":["backen","getreide","getreidesorten","gluten","lang-de"]},{"location":"Haushalt/Photovoltaik-Uebersicht.html","title":"Photovoltaik \u00dcbersicht","text":"<p>DRAFT: \u00dcbersicht \u00fcber die aktuelle Photovoltaik- und Wechselrichtertechnologien.</p>","tags":["lang-de","monokristallin","photovoltaik","polykristallin","solarzellen","wechselrichter"]},{"location":"Haushalt/Photovoltaik-Uebersicht.html#solarzellen","title":"Solarzellen","text":"Eigenschaft Monokristalin Polykristalin D  \u00fcnnschicht amorph D\u00fcnnschicht CIGS Perowskit Tandemsolarzelle Wirkungsgrad 18-20 % 15-17 % 6-10 % ~ 17 % keine Marktreife keine Marktreife Preis/W keine Marktreife keine Marktreife Leistung H\u00f6chste Leistung Hohe Leistung Mittlere Leistung Geringe Leistung keine Marktreife keine Marktreife Schwachlichtverhalten Schlecht bei diffusem Licht Schlecht bei diffusem Licht Wenig Einbu\u00dfen Wenig Einbu\u00dfen keine Marktreife keine Marktreife W\u00e4rmeverhalten hohe Temperaturen Einbu\u00dfe bei starker W\u00e4rme Einbu\u00dfe bei starker W\u00e4rme Wenig Einbu\u00dfen Wenig Einbu\u00dfen keine Marktreife keine Marktreife Lebensdauer hohe Lebensdauer hohe Lebensdauer keine Marktreife keine Marktreife","tags":["lang-de","monokristallin","photovoltaik","polykristallin","solarzellen","wechselrichter"]},{"location":"Haushalt/Photovoltaik-Uebersicht.html#wechselrichter","title":"Wechselrichter","text":"","tags":["lang-de","monokristallin","photovoltaik","polykristallin","solarzellen","wechselrichter"]},{"location":"Haushalt/Rezept-Knaeckebrot.html","title":"Rezept Kn\u00e4ckebrot","text":"<p>Rezept f\u00fcr Kn\u00e4ckebrot.</p>","tags":["backen","brot","kn\u00e4ckebrot","lang-de","rezept"]},{"location":"Haushalt/Rezept-Knaeckebrot.html#zutaten","title":"Zutaten","text":"Menge Zutat 120g Dinkelmehl 120g Haferflocken 150g Kerne (Sonnenblumen, K\u00fcrbis, Pinien, ...) 50g Sesam 1TL Salz 400ml Wasser 2 EL \u00d6l (Oliven\u00f6l, Sonnenblumen\u00f6l) (100g) (Optional: geriebenen K\u00e4se) xxg (Optional: Zucker / Honig)","tags":["backen","brot","kn\u00e4ckebrot","lang-de","rezept"]},{"location":"Haushalt/Rezept-Knaeckebrot.html#verarbeitung","title":"Verarbeitung","text":"<ol> <li>Alle Zutaten (au\u00dfer K\u00e4se) zusammen mischen und f\u00fcr 10 Minuten ziehen lassen.</li> <li>Bei 160\u00b0C Umluft f\u00fcr 10 Minuten auf mittlerer Schiene anbacken</li> <li>Mit einem Messer oder Pizzaschneider in Portionsgr\u00f6\u00dfen teilen (z.B. 3x4cm).</li> <li>50 Minuten fertig backen.</li> <li>(Optional: kurz vor Ende der Backzeit K\u00e4se \u00fcber den Teig streuen und schmelzen lassen)</li> </ol>","tags":["backen","brot","kn\u00e4ckebrot","lang-de","rezept"]},{"location":"Linux/Backup-to-AWS-S3-Deep-Archive.html","title":"Backup To AWS S3 Deep Archive","text":"<p>Backup to AWS S3 with storage class Deep Archive is a cheap solution for a disaster backup. The following explanations and configuration is based <code>Ubuntu 20.04.6 LTS</code> and <code>duplicity 1.2.2</code>. Duplicity is installed via <code>snap</code>.</p> <p>The script is split in two parts. The secret values like access keys are stored in a <code>.env</code> file. With this, no credentials and keys needs to be stored in the script.</p> <pre><code># .env file\nAWS_ACCESS_KEY_ID=\"ENTER-YOUR-AWS_ACCESS_KEY_ID\"\nAWS_SECRET_ACCESS_KEY=\"ENTER-YOUR-AWS_SECRET_ACCESS_KEY\"\nGPG_KEYID=\"GPG-KEY-ID\"\n\nBUCKET_NAME=\"AWS-BUCKET-NAME\"\n</code></pre> <p>The variable <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> defines the access values for AWS S3, <code>GPG_KEYID</code> is used to encrypt the backup with a GPG Key. Everything is stored in the bucket, configured in <code>BUCKET_NAME</code>.</p> <pre><code> 1| #!/bin/bash\n 2| \n 3| if [ $(whoami) != \"root\" ]; then\n 4|    echo \"please execute as root user\"\n 5|    exit 5\n 6| fi\n 7| \n 8| AWS_ACCESS_KEY_ID=\"&lt;set me in .env file&gt;\"\n 9| AWS_SECRET_ACCESS_KEY=\"&lt;set me in .env file&gt;\"\n10| GPG_KEYID=\"&lt;set me in .env file&gt;\"\n11| BUCKET_NAME=\"&lt;set me in .env file&gt;\"\n12| export $(cat /absolute/path/to/.env | xargs)\n13| \n14| LOGFOLDER=\"/logfolder/dupli_logs\"q\n15| \n16| DATESTR=`date +%Y-%m-%d_%H%M`\n17| \n18| backup_to_duplicity() {\n19| \n20|    SOURCE_FOLDER=${1}\n21|    DEST_FOLDER=${2}\n22| \n23|    LOG_ERR=\"${LOGFOLDER}/dupli.${DEST_FOLDER}.${DATESTR}.err.log\"\n24|    LOG_STD=\"${LOGFOLDER}/dupli.${DEST_FOLDER}.${DATESTR}.std.log\"\n25| \n26| \n27|    echo \"BACKUP ${SOURCE_FOLDER}\" | tee -a ${LOG_ERR} ${LOG_STD}\n28|    date | tee -a ${LOG_ERR} ${LOG_STD}\n29| \n30| \n31|    dupl_cmd=\"/snap/bin/duplicity --full-if-older-than 180D \\\n32|       --encrypt-key=${GPG_KEYID} \\\n33|       --progress \\\n34|       --s3-use-deep-archive \\\n35|       --s3-use-multiprocessing \\\n36|       --volsize 700 \\\n37|       ${SOURCE_FOLDER} \\\n38|       boto+s3://${BUCKET_NAME}/${DEST_FOLDER}/ \\\n39|       2&gt;&gt; ${LOG_ERR} 1&gt;&gt; ${LOG_STD}\"\n40| \n41|    echo \"${dupl_cmd}\"\n42|    bash -c \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${dupl_cmd}\"\n43| \n44| }\n45| \n46| \n47| \n48| backup_to_duplicity \"/media/my/mounted/folder\" \"FolderInAWS\"\n49| \n50| \n51| unset AWS_ACCESS_KEY_ID\n52| unset AWS_SECRET_ACCESS_KEY\n</code></pre>","tags":["aws","backup","bash","lang-en","s3"]},{"location":"Linux/Commands-Collection.html","title":"Commands Collection","text":"<p>Collection of helpful Linux commands.</p>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#list-file-with-leading-line-numbers","title":"List File With Leading Line Numbers","text":"<pre><code>$ nl -w2 -s\"| \" testfile.txt\n 1| This is a test file\n 2| with line break.\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#fast-search","title":"Fast Search","text":"<pre><code>$ fd searchString\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#generate-and-read-qr-codes","title":"Generate and Read QR Codes","text":"<pre><code># Generate\n$ echo \"some data\" | base64 -w 0 | qrencode -l Q -t SVG -o /tmp/qr.svg\n\n# Read\n$ zbarimg -q /tmp/qr.svg | cut -c 9- | base64 -d\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#generate-duplex-pdf-from-single-page-scan","title":"Generate Duplex PDF from Single Page Scan","text":"<pre><code># Change order of even pages\n$ /usr/bin/pdftk EvenPages.pdf cat end-1 output BackWardsEvenPages.pdf\n\n# Merge even and odd pages\n$ /usr/bin/pdftk ODD=OddPages.pdf EVEN=backWardsEvenPages.pdf shuffle ODD EVEN output FinalDocument.pdf\n\n# Remove last blank page, if necessary\n$ /usr/bin/pdftk FinalDocument.pdf cat 1-r2 output FinalDocumentWithoutLast.pdf\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#media-files","title":"Media Files","text":"","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#download-videos","title":"Download Videos","text":"<p>Provide a selection of possible variations of audio and video format. <pre><code>$ yt-dlp -f- &lt;URL&gt;\n</code></pre> Download with multiple audio tracks <pre><code>yt-dlp -f \"AUDIO_ID_1+AUDIO_ID_2+AUDIO_ID_3+VIDEO_ID\" --audio-multistreams &lt;URL&gt; \n</code></pre></p>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#rename-mass-files","title":"Rename mass files","text":"","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#rename-media-files-to-create-date","title":"Rename Media Files to Create Date","text":"<pre><code>$ exiftool -d '%Y-%m-%d_%H%M%S.%%e' '-filename&lt;CreateDate' -v 1 *\n$ exiftool -d '%Y-%m-%d_%H%M%S.%%e' '-filename&lt;DateTimeOriginal' -v 1 *\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#rename-file-based-on-modified-date","title":"Rename File based on Modified Date","text":"<pre><code>for f in *.jpg\ndo\n    mv -n \"$f\" \"$(date -r \"$f\" +\"%Y-%m-%d_%H%M%S\").jpg\"\ndone\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#copy-metadata-media","title":"Copy Metadata Media","text":"<pre><code>$ exiftool -TagsFromFile source.mp4 -all:all -overwrite_original destination.mp4\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#create-empty-file","title":"Create Empty File","text":"<pre><code># create file with size but does not allocate space on disc\ntruncate -s 1G foo.file\n\n# create file with size also llocate space on disc\nfallocate -l 1G foo.file\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#remove-drm-from-pdf","title":"Remove DRM from PDF","text":"<pre><code># Login to Adobe DRM\n$ adept_activate --username ADOBE_LOGIN_USERNAME --password ADOBE_LOGIN_PASSWORD\n\n# Download PDF from ASCM File\n$ acsmdownloader --acsm-file downloadfile.ascm --output-file outputfile\n\n# Remove DRM\n$ adept_remove TMPOUT\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#rename-file-in-folder-to-lowercase","title":"Rename File in Folder to Lowercase","text":"<pre><code>$ find . -type f -exec perl-rename -v 'y/A-Z/a-z/' {} \\;\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#convert","title":"Convert","text":"","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#convert-avi-to-mp4","title":"Convert AVI to mp4","text":"<pre><code>$ ffmpeg -i input.avi -b 800k output.mp4\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#convert-markdown-to-pdf","title":"Convert Markdown to PDF","text":"<pre><code># Set alias\n$ alias pandocker=\"docker run --rm --volume \"`pwd`:/data\" --user `id -u`:`id -g` pandoc/latex:2.6\"\n\n#Use the command\n$ pandocker in.md -o out.pdf\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#clear-log-journal","title":"Clear log journal","text":"<pre><code>$ sudo journalctl --rotate --vacuum-time=1s\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#zfs","title":"ZFS","text":"","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Commands-Collection.html#destroy-all-snapshots-from-dataset","title":"Destroy all Snapshots from Dataset","text":"<pre><code>$ zfs list -H -o name -t snapshot &lt;POOL/DATASET&gt; | xargs -n1 sudo zfs destroy -v -n\n</code></pre>","tags":["acsm","avi","bash","drm","duplex","exif","ffmpeg","jpg","lang-en","linux","markdown","mp4","pdf","qr","qrcode","rename","scanner","video","yt-dlp"]},{"location":"Linux/Delete-Old-ZFS-Snapshots.html","title":"Delete Old ZFS Snapshots","text":"<p>The script generates a list of existing snapshots, which should be removed from a dataset. For every month <code>DELCOUNT = 3</code> snapshots are preserved for deleting. The snapshots from the current month are also protected. The snapshots needs to be in the following string format: <code>pool/dataset@%Y-%m-%d_%H%M</code>, for example <code>storage/documents@2023-04-24_0625</code>.</p> <pre><code># deleteOldZFSSnapshots.py\n\n 1| import libs.mockdata as md\n 2| import libs.datemagic as dm\n 3| import libs.zfsmagic as zm\n 4| import subprocess\n 5| import datetime\n 6| import sys\n 7| \n 8| # dummydates = md.mockDates\n 9| \n10| DATASET = sys.argv[1]\n11| \n12| DATENOW = datetime.datetime.now()\n13| DELCOUNT = 3\n14| \n15| result = subprocess.run([\"zfs\", \"list\", \"-t\", \"snapshot\", \"-o\", \"name\", DATASET], capture_output=True)\n16| #print(result.stdout.splitlines()[2].decode(\"utf-8\"))\n17| snapshotentries = result.stdout.splitlines()\n18| print(\"Found snapshotentries:\", len(snapshotentries))\n19| zfsdict = dm.sortDates(zm.snapOutToDict(snapshotentries))\n20| print(\"Found zfsdict        :\", dm.countsnaps(zfsdict))\n21| delSmaps = zm.removeProtectedSnaps(zfsdict, DATENOW, DELCOUNT)\n22| print(\"Size cleanup         :\", dm.countsnaps(delSmaps))\n23| \n24| dm.pSnapsAsLine(\"zfs destroy\", zfsdict)\n25| #dm.ppDates(zfsdict)\n</code></pre> <p> <pre><code># libs/datemagic.py\n\n 1| def sortDates(inDict):\n 2|     inDict = dict(sorted(inDict.items()))\n 3| \n 4|     for year, months in inDict.items():\n 5|         # print(\"Year:\", year)\n 6|         months = dict(sorted(months.items()))\n 7|         inDict[year] = months\n 8| \n 9|         for month, days in months.items():\n10|             # print(\"Month:\", month)\n11|             days = dict(sorted(days.items()))\n12|             inDict[year][month] = days\n13| \n14|     return inDict\n15| \n16| def countsnaps(inDict):\n17|     count = 0\n18|     for year, months in inDict.items():\n19|         for month, days in months.items():\n20|             for day, daystring in days.items():\n21|                 count = count + 1\n22| \n23|     return count\n24| \n25| def ppDates(inDict):\n26|     ycount = 0\n27|     mcount = 0\n28|     dcount = 0\n29|     for year, months in inDict.items():\n30|         ycount = ycount + 1\n31|         mcount = 0\n32|         print(\"\", year)\n33|         for month, days in months.items():\n34|             mcount = mcount + 1\n35|             dcount = 0\n36|             print(\"  \", month)\n37|             for day, daystring in days.items():\n38|                 dcount = dcount + 1\n39|                 print(\"  \", \"  \", year, month, day,\":\",daystring)\n40|             print(\"  \", \"  \", \"Days:\", dcount, \"for\", month, year, \"\")\n41|         print(\"  \", \"Months:\", mcount, \"for\", year, \"\")\n42|     print(\"Years:\", ycount, \"\")\n43| \n44| def pSnapsAsLine(precommand: str, inDict: {}):\n45|     for year, months in inDict.items():\n46|         for month, days in months.items():\n47|             for day, daystring in days.items():\n48|                 print(precommand, daystring)\n</code></pre></p> <p> <pre><code># libs/zfsmagic.py\n\n 1| import datetime\n 2| import libs.datemagic as dm\n 3| import random\n 4| \n 5| \n 6| def snapOutToDict(strin):\n 7|     returnDict = {}\n 8|     #print(type(returnDict), returnDict)\n 9|     #print(type(strin))\n10|     for k in strin[1:]:\n11|         l = k.decode(\"UTF-8\").split(\"@\")\n12|         #print(k, l[0], l[1])\n13|         datetime = l[1].split(\"_\")\n14|         date = datetime[0].split(\"-\")\n15|         #print(date[0], date[1], date[2], k.decode(\"UTF-8\"))\n16|         datedict = {date[2]: k.decode(\"UTF-8\")}\n17| \n18| \n19|         itm = {date[0]: {date[1]: {date[2]: k.decode(\"UTF-8\")}}}\n20|         returnDict = addItemToDict(returnDict, itm)\n21| \n22|     return returnDict\n23| \n24| def addItemToDict(inDict: {}, item: {}):\n25|     year = list(item)[0]\n26|     month = list(item[year])[0]\n27|     day = list(item[year][month])[0]\n28|     daystr = item[year][month][day]\n29| \n30|     if year not in inDict:\n31|         inDict[year] = {}\n32|     if month not in inDict[year]:\n33|         inDict[year][month] = {}\n34|     if day not in inDict[year][month]:\n35|         inDict[year][month][day] = {}\n36| \n37|     inDict[year][month][day] = daystr\n38| \n39|     return inDict\n40| \n41| def removeProtectedSnaps(dictin: {}, today: datetime.date, count: int):\n42|     monthstring = str(f\"{today.month:02d}\")\n43|     yearstring = str(today.year)\n44|     try:\n45|         del dictin[yearstring][monthstring]\n46|     except KeyError:\n47|         print(\"Not in Dictionary:\", yearstring, monthstring)\n48| \n49|     for y in dictin:\n50|         for m in dictin[y]:\n51|             #print(dictin[y][m])\n52|             dictin[y][m] = randomDelMonth(dictin[y][m], count)\n53| \n54|     return dictin\n55| \n56| def randomDelMonth(dictin: {}, count: int):\n57|     lenmonth = len(dictin)\n58| \n59|     #print(lenmonth, count)\n60|     if lenmonth &lt;= count:\n61|         return {}\n62| \n63|     for i in range(count):\n64|         rndindex = random.randint(0, lenmonth - 1 - i)\n65|         tmpkey = list(dictin.keys())[rndindex]\n66|         del dictin[tmpkey]\n67| \n68|     return dictin\n</code></pre></p> <p> <pre><code># libs/mockdata.py\n\n 1| mockDates = {\n 2|     \"2020\": {\n 3|         \"05\": {\n 4|             \"02\": \"2022-05-02\",\n 5|             \"01\": \"2022-05-01\"\n 6|             },\n 7|         \"03\": {\n 8|             \"06\": \"2022-03-06\",\n 9|             \"02\": \"2022-03-02\"\n10|             },\n11|     },\n12|     \"1990\": {\n13|         \"06\": {\n14|             \"02\": \"1999-06-02\",\n15|             \"01\": \"1999-06-01\"\n16|             },\n17|         \"02\": {\n18|             \"06\": \"1999-02-06\",\n19|             \"02\": \"1999-02-02\"\n20|             },\n21|     }\n22| }\n</code></pre></p>","tags":["lang-en","openzfs","prune","python3","zfs"]},{"location":"Linux/Important-Configurations.html","title":"Important Configurations","text":"<p>Collection of helpful Linux commands.</p>","tags":["linux","configuration"]},{"location":"Linux/Important-Configurations.html#login-timeout","title":"Login Timeout","text":"<p>Configure fail login timeout <pre><code>$ /etc/security/faillock.conf\n</code></pre></p>","tags":["linux","configuration"]},{"location":"Linux/OpenZFS-with-HSM-encryption.html","title":"OpenZFS With HSM Encryption","text":"<p>OpenZFS supports native encryption for zfs filesystems. As passphrase a raw byte stream can be used. So it is possible to combine ZFS native encryption with a HSM.</p> <p>The passphrase is a result of the key derivation function (KDF) from openssl for elliptic curves. Therefor a private key and a public key is necessary. The KDF returns an 32\u00a0Bit value, which can be used as raw passphrase for the ZFS encrpytion.</p> <p>In this example the elliptic curve <code>prime256v1</code> (aka <code>NIST P-256</code>, <code>secp256r1</code>) is used. </p>","tags":["bash","encryption","hsm","lang-en","openzfs","zfs"]},{"location":"Linux/OpenZFS-with-HSM-encryption.html#initiate-the-hardware","title":"Initiate the Hardware","text":"<p>For the setup, a Nitrokey HSM 2 is used (in the following only HSM called). The first action is to initialise the HSM. The vendor suggests <code>3537363231383830</code> as SO-PIN and <code>648219</code> as User-PIN. I also recommend the tutorial from raymii if you want to dive deeper into the setup of HSM.</p> <p>Initialise the HSM with default pins:  <pre><code>$ sc-hsm-tool --initialize --so-pin 3537363231383830 --pin 648219 --label \"ZFS Crypto\"\n</code></pre></p> <p>The next step is to generate the master key. The label helps to identify the key, but there is no specified schema: <pre><code>$ pkcs11-tool --login --pin 648219 --keypairgen --key-type EC:prime256v1 --label \"keyname:zfs-master\"\n</code></pre> As output something similar should be printed on the screen. In this example the key has the id <code>f2a69ae949e5e3f51886e31aa81a7c433269b167</code> <pre><code>Using slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; EC\n  label:      keyname:zfs-master\n  ID:         f2a69ae949e5e3f51886e31aa81a7c433269b167\n  Usage:      sign, derive\n  Access:     none\nPublic Key Object; EC  EC_POINT 256 bits\n  EC_POINT:   044104b53ad19a56c2557d8f83d4e82e88828dcf14aeb947e1f184aefe4badd42f15cf3b62a25602d2c696fa6b1a2ceced362085dff898027056dee3b2ed4a80e8970b\n  EC_PARAMS:  06082a8648ce3d030107\n  label:      keyname:zfs-master\n  ID:         f2a69ae949e5e3f51886e31aa81a7c433269b167\n  Usage:      verify, derive\n  Access:     none\n</code></pre></p> <p>As described, two keys are necessary to derive the passphrase. The recommendation is to use the master key (keyname:zfs-master) and a separate key for every ZFS filesystem. So the next step is to generate a second key: <pre><code>$ pkcs11-tool --login --pin 648219 --keypairgen --key-type EC:prime256v1 --label \"keyname:zfs-crypt-storage-1\"\n</code></pre> As output something similar should be printed on the screen. In this example the key has the id <code>f8a2537ed2d484ad18325c051a17ef04d36f8c5d</code>: <pre><code>Using slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; EC\n  label:      keyname:zfs-crypt-storage-1\n  ID:         f8a2537ed2d484ad18325c051a17ef04d36f8c5d\n  Usage:      sign, derive\n  Access:     none\nPublic Key Object; EC  EC_POINT 256 bits\n  EC_POINT:   0441042f6a00018cabca1162ef73011cf5a8358951a71b15b00c88cf223e87669075ec7fe10f14c5d28900ae66f3c6e0a41e3ba6b7cd7b0dba3c18f7af2ddf89e971c7\n  EC_PARAMS:  06082a8648ce3d030107\n  label:      keyname:zfs-crypt-storage-1\n  ID:         f8a2537ed2d484ad18325c051a17ef04d36f8c5d\n  Usage:      verify, derive\n  Access:     none\n</code></pre> To use the KDF, a private key (in this example keyname:zfs-master) and a public key (in this example keyname:zfs-crypt-storage-1) is necessary. The private key can be exported to the filesystem and stored beside the encrpyted ZFS filesystem. After exporting the public key keyname:zfs-crypt-storage-1, its private key can be deleted. Keep in mind, that also the public key will be deleted. So exporting should be the first step!</p> <p>Export the public key keyname:zfs-crypt-storage-1 <code>(f8a2537ed2d484ad18325c051a17ef04d36f8c5d)</code> and convert the key into PEM format: <pre><code>$ pkcs11-tool \\\n    --read-object \\\n    --type pubkey \\\n    --id f8a2537ed2d484ad18325c051a17ef04d36f8c5d | \\\n    openssl ec -pubin -inform DER -outform PEM -pubout \\\n    -out zfs-crypt-storage-1.pub.pem\n</code></pre></p> <p>As output something similar should be printed on the screen: <pre><code>$ cat zfs-crypt-storage-1.pub.pem \n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEL2oAAYyryhFi73MBHPWoNYlRpxsV\nsAyIzyI+h2aQdex/4Q8UxdKJAK5m88bgpB47prfNew26PBj3ry3fielxxw==\n-----END PUBLIC KEY-----\n</code></pre></p> <p>If the export was sucessfull, the private key keyname:zfs-crypt-storage-1 can be deleted: <pre><code>$ pkcs11-tool \\\n    --delete-object \\\n    --type privkey \\\n    --login \\\n    --id f8a2537ed2d484ad18325c051a17ef04d36f8c5d\n</code></pre></p>","tags":["bash","encryption","hsm","lang-en","openzfs","zfs"]},{"location":"Linux/OpenZFS-with-HSM-encryption.html#create-the-encrypted-zfs-filesystem","title":"Create the encrypted ZFS filesystem","text":"<p>To use openssl with a HSM, the pkcs11-url needs to be provided to the commandline tool. In this example our HSM has the serial number <code>DENK02123456</code>.</p> <p>To get detailed information about the connected devices (HSM, Smart Cards, ...), the tool <code>p11tool</code> is very helpful. In normal the case, business PCs/Laptops has smart card reader on board and will show here additional devices beside the HSM.</p> <p>For this example the output of the HSM look something like: <pre><code>$ p11tool --list-tokens\npkcs11:model=PKCS%2315%20emulated;manufacturer=www.CardContact.de;serial=DENK02123456;token=ZFS%20Crypto%20%28UserPIN%29%00%00%00%00%00%00%00%00%00%00%00%00\n</code></pre> In most cases, only the serial number <code>(pkcs11:serial=DENK02123456)</code> is necessary to address the HSM. To get the pkcs11-url for the relevant key, an overview can be printed out with the following command: <pre><code>$ p11tool --list-all \"pkcs11:serial=DENK02123456\"\nObject 0:\n    URL: pkcs11:model=PKCS%2315%20emulated;manufacturer=www.CardContact.de;serial=DENK02123456;token=ZFS%20Crypto%20%28UserPIN%29%00%00%00%00%00%00%00%00%00%00%00%00;id=%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67;object=keyname%3Azfs-master;type=public\n    Type: Public key (EC/ECDSA-SECP256R1)\n    Label: keyname:zfs-master\n    ID: f2:a6:9a:e9:49:e5:e3:f5:18:86:e3:1a:a8:1a:7c:43:32:69:b1:67\n</code></pre></p> <p>In most cases, the url can be shortend to <code>pkcs11:serial=DENK02123456;id=%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67</code>. Take in mind, that the key ID of keyname:zfs-master <code>(f2a69ae949e5e3f51886e31aa81a7c433269b167)</code> is given as hex value and needs to be written with a leading <code>%</code> for every hex group <code>(%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67)</code>. <pre><code>$ openssl pkeyutl -derive \\\n    -engine pkcs11 \\\n    -keyform engine \\\n    -peerform PEM \\\n    -inkey \"pkcs11:serial=DENK02123456;id=%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67\" \\\n    -peerkey zfs-crypt-storage-1.pub.pem \\\n    -out 00_11_key.bin\n</code></pre></p> <p>To encrypt the filesystem a key is derived with ECDH from the public and private key. Important: OpenSSL mention in the documentation, that the derived key should not be used directly. Hash the value instead: \"Also note that the derived shared secret is not suitable for use directly as a shared key. Typically the shared secret is passed through some hash function first in order to generate a key.\"</p> <p>Create encrypted ZFS Filesystem <pre><code>$ openssl pkeyutl -derive \\\n    -engine pkcs11 \\\n    -keyform engine \\\n    -peerform PEM \\\n    -inkey \"pkcs11:serial=DENK02123456;id=%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67\" \\\n    -peerkey zfs-crypt-storage-1.pub.pem \\\n    | sha512sum | awk '{print $1}' \\\n    | zfs create -o encryption=aes-256-ccm -o keyformat=raw pool1/crypthsm            \n</code></pre></p> <p>Mount encrypted ZFS <pre><code>$ openssl pkeyutl -derive \\\n    -engine pkcs11 \\\n    -keyform engine \\\n    -peerform PEM \\\n    -inkey \"pkcs11:serial=DENK02123456;id=%F2%A6%9A%E9%49%E5%E3%F5%18%86%E3%1A%A8%1A%7C%43%32%69%B1%67\" \\\n    -peerkey zfs-crypt-storage-1.pub.pem \\\n    | sha512sum | awk '{print $1}' \\\n    | zfs load-key pool1/crypthsm\n</code></pre></p> <p>Mount the filesystem <pre><code>zfs mount pool1/crypthsm\n</code></pre></p> <p>Unmount the filesystem and unload the key from memory <pre><code>zfs unmount -a &amp;&amp; zfs unload-key -a\n</code></pre></p>","tags":["bash","encryption","hsm","lang-en","openzfs","zfs"]},{"location":"Linux/ZFS-clone-snapshots.html","title":"ZFS Clone Snapshots","text":"<p>The following script clones a zfs dataset with all available snapshots. The variable <code>source=${1}</code> defines the source dataset, <code>dest=${2}</code> defines the destination dataset. The destination dataset must be created in advanced manually.</p> <pre><code> 1| #!/bin/bash\n 2| \n 3| source=${1}\n 4| source_mountpoint=$(/usr/sbin/zfs get mountpoint -o value -H ${source})\n 5| source_snappath=${source_mountpoint}/.zfs/snapshot\n 6| dest=${2}\n 7| dest_mountpoint=$(/usr/sbin/zfs get mountpoint -o value -H ${dest})\n 8| \n 9| snaps=(${source_snappath}/*)\n10| \n11| IFS=$'\\n' snaps=($(sort &lt;&lt;&lt;\"${snaps[*]}\"))\n12| unset IFS\n13| \n14| for f in \"${snaps[@]}\"; do\n15|    echo \"Copy $f\"\n16|    snapname=$(basename \"$f\")\n17|    /usr/bin/rsync -a --progress --delete ${f}/ ${dest_mountpoint}\n18|    /usr/sbin/zfs snapshot ${dest}@${snapname}\n19|    echo \"-------------------------------------------------\"\n20| done\n</code></pre>","tags":["bash","clone","lang-en","openzfs","zfs"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html","title":"Merks\u00e4tze Natur, Tiere Und Pflanzen","text":"<p>Eselsbr\u00fccken und Merks\u00e4tze f\u00fcr die Natur und die Landwirschaft.</p>","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#getreidesorten","title":"Getreidesorten","text":"Getreideart Aussehen Blatt\u00f6rchen Grannen Korn Gerste greift gro\u00dfes G -&gt; lange Grannen Weizen wimpert kein g -&gt; keine Grannen rundlich Roggen reicht nicht kleines g = kurze Grannen gr\u00fcn Hafer hat keins","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#wald","title":"Wald","text":"","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#baume","title":"B\u00e4ume","text":"Baum Merkspruch / Eselsbr\u00fccken Zapfen Erle Erle hat eine Perle und eine Kerbe Kiefer langgezogenes ii: lange Nadel und paarig, lange Wurzlen (Pfahl)runde Zapfen Fichte Fichte sticht, Tanne nicht; hat kleine (Fisch)schuppen als Rinde H\u00e4ngend, Tanne Fichte sticht, Tanne nicht Stehend, erinnert an Form einer Weihnachtstanne Douglasie Bodenfeuchte Baumart trocken Lichte Baumarten und Str\u00e4ucherEiche, Ahorn, Linde, Esche, Hagebutte frisch/feucht Buche, Esche, Bergahorn, Winterlinde, Tanne, Fichte, Birke nass Esche, Eiche, Birke, Erle, Weide","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#tiere","title":"Tiere","text":"","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#rehwild","title":"Rehwild","text":"Ereigni Verf\u00e4rben Jung verf\u00e4rbt fr\u00fch, verfegt / wift ab sp\u00e4t Abwerfen Alt verf\u00e4rbt sp\u00e4t (l\u00e4nger grau, wie alte menschen), verfegt / wift ab fr\u00fch","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#raubwild","title":"Raubwild","text":"Ereignis Eigenschaft Geburt Blind, behaart, Krallen, ohne Z\u00e4hne, taub","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#enten","title":"Enten","text":"Art Merkspruch / Eselsbr\u00fccken Schwimmenten Wir gehen zur Entenjagd und haben nichts dabei au\u00dfer einen Stock (Stockente). Aus diesem Stock machen wir einen Spie\u00df (Spie\u00dfente). Mit diesem Spie\u00df gehen wir auf die Ente los, die Ente f\u00e4ngt an zu schnattern (Schnatterente). Wir haben die Ente, machen einmal Krick (Krickente) und einem Kn\u00e4k (Kn\u00e4kente). Dann hat die Ente den L\u00f6ffel (L\u00f6ffelente) abgegeben. Und wir gehen pfeifend (Pfeifente) nach Hause.","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#hasen","title":"Hasen","text":"Art Eselsbr\u00fccken Feldhase gelbe Seher. Helle Seher, da \u00fcber Tage lebend, wei\u00dfes Unterfell, gebleicht durch die Sonne Wildkaninchen Lebt unter der Erde, daher dunkel Augen. Graues Fell, graues Unterfell","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Natur/Merksaetze-Natur-Tiere-und-Pflanzen.html#raubvogel","title":"Raubv\u00f6gel","text":"Art Merkspruch / Eselsbr\u00fccken Eigenschaft Bisst\u00f6ter Horst Besetzer Falkenzahn vorhanden Grifft\u00f6ter Horstgestalter","tags":["eselsbr\u00fccken","landwirtschaft","lang-de","natur","pflanze","tier"]},{"location":"Security/Security%20Notes.html","title":"Security Notes","text":"","tags":["security"]},{"location":"Security/Security%20Notes.html#links","title":"Links","text":"<ul> <li>Deniability of WhatsApp</li> </ul> <p>WhatsApp uses Signal protocol which is by design offers plausible deniability in pairwise encrypted messaging. In pairwise messaging, every message is sent with HMAC-SHA256 to verify the integrity of the cipher text. HMAC uses a shared secret known to both sender and receiver.</p> <p>Quoting from an answer on Difference between non-repudiation and plausible deniability</p> <pre><code>A recepient can prove the authenticity of the message that it is indeed sent by you. If it's not him who wrote the message then it must be you who wrote it. In either manner, both the sender and the recipient can verify who sent the message. But neither of them can prove authorship of the message to others. A recepient can easily forge HMAC with a valid key to make it look like sender has sent this. He can also give away the shared secret to a 3rd party to forge HMACs in future messages.\n</code></pre> <p>Also, once a message is delivered, the key is deleted so there is no way to prove authorship.</p> <p>In WhatsApp, you don't even have to forge HMACs. All sent &amp; received messages are stored in Sqlite database file msgstore.db in unencrypted form in the internal storage (/data/data/com.whatsapp/files). A recepient can edit this file and modify any message that are sent by you to frame you for anything.</p> <p>Even if Alice claims that Bob has sent her a message , she can't prove this to anyone. Bob can deny sending of any message sent by him.</p> <p>Plausible deniability doesn't hold up in WhatsApp group messaging. In group messaging, a sender signs the message with its private Signature key so they cannot be denied and that can be used by the law.</p> <p>In a legal context, plaintext messages are almost always considered proof anyways regardless of whether the underlying protocol is deniable or not. So it also depends how judicial system in your country treats plaintext messages.</p>","tags":["security"]},{"location":"Windows/Commands-Collection.html","title":"Commands Collection","text":"<p>Collection of helpful Windows commands.</p>","tags":["lang-en","terminal","windows"]},{"location":"Windows/Commands-Collection.html#change-all-devices-to-natural-scrolling","title":"Change all devices to natural scrolling","text":"<p><pre><code>&gt; $mode = Read-host \"How do you like your mouse scroll (0 or 1)?\"; Get-PnpDevice -Class Mouse -PresentOnly -Status OK | ForEach-Object { \"$($_.Name): $($_.DeviceID)\"; Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Enum\\$($_.DeviceID)\\Device Parameters\" -Name FlipFlopWheel -Value $mode; \"+--- Value of FlipFlopWheel is set to \" + (Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Enum\\$($_.DeviceID)\\Device Parameters\").FlipFlopWheel + \"`n\" }\n</code></pre> For natural scrolling choose <code>1</code> as answer.</p>","tags":["lang-en","terminal","windows"]},{"location":"tags.html","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags.html#acsm","title":"acsm","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#avi","title":"avi","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#aws","title":"aws","text":"<ul> <li>Backup To AWS S3 Deep Archive</li> </ul>"},{"location":"tags.html#backen","title":"backen","text":"<ul> <li>Getreidesorten</li> <li>Rezept Kn\u00e4ckebrot</li> </ul>"},{"location":"tags.html#backup","title":"backup","text":"<ul> <li>Backup To AWS S3 Deep Archive</li> </ul>"},{"location":"tags.html#bash","title":"bash","text":"<ul> <li>Backup To AWS S3 Deep Archive</li> <li>Commands Collection</li> <li>OpenZFS With HSM Encryption</li> <li>ZFS Clone Snapshots</li> </ul>"},{"location":"tags.html#brot","title":"brot","text":"<ul> <li>Rezept Kn\u00e4ckebrot</li> </ul>"},{"location":"tags.html#certificate","title":"certificate","text":"<ul> <li>Firefox And SelfCA</li> </ul>"},{"location":"tags.html#certificate-authority","title":"certificate-authority","text":"<ul> <li>Firefox And SelfCA</li> </ul>"},{"location":"tags.html#clone","title":"clone","text":"<ul> <li>ZFS Clone Snapshots</li> </ul>"},{"location":"tags.html#configuration","title":"configuration","text":"<ul> <li>Important Configurations</li> </ul>"},{"location":"tags.html#decryption","title":"decryption","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#drm","title":"drm","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#duplex","title":"duplex","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#encryption","title":"encryption","text":"<ul> <li>ESP-IDF with WolfSSL</li> <li>OpenZFS With HSM Encryption</li> </ul>"},{"location":"tags.html#eselsbrucken","title":"eselsbr\u00fccken","text":"<ul> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#esp-idf","title":"esp-idf","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#esp32","title":"esp32","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#espressif","title":"espressif","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#exif","title":"exif","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#ffmpeg","title":"ffmpeg","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#firefox","title":"firefox","text":"<ul> <li>Firefox And SelfCA</li> </ul>"},{"location":"tags.html#getreide","title":"getreide","text":"<ul> <li>Getreidesorten</li> </ul>"},{"location":"tags.html#getreidesorten","title":"getreidesorten","text":"<ul> <li>Getreidesorten</li> </ul>"},{"location":"tags.html#gluten","title":"gluten","text":"<ul> <li>Getreidesorten</li> </ul>"},{"location":"tags.html#hsm","title":"hsm","text":"<ul> <li>OpenZFS With HSM Encryption</li> </ul>"},{"location":"tags.html#jpg","title":"jpg","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#knackebrot","title":"kn\u00e4ckebrot","text":"<ul> <li>Rezept Kn\u00e4ckebrot</li> </ul>"},{"location":"tags.html#landwirtschaft","title":"landwirtschaft","text":"<ul> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#lang-de","title":"lang-de","text":"<ul> <li>Getreidesorten</li> <li>Photovoltaik \u00dcbersicht</li> <li>Rezept Kn\u00e4ckebrot</li> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#lang-en","title":"lang-en","text":"<ul> <li>Firefox And SelfCA</li> <li>ESP-IDF with WolfSSL</li> <li>Backup To AWS S3 Deep Archive</li> <li>Commands Collection</li> <li>Delete Old ZFS Snapshots</li> <li>OpenZFS With HSM Encryption</li> <li>ZFS Clone Snapshots</li> <li>Commands Collection</li> </ul>"},{"location":"tags.html#linux","title":"linux","text":"<ul> <li>Commands Collection</li> <li>Important Configurations</li> </ul>"},{"location":"tags.html#markdown","title":"markdown","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#monokristallin","title":"monokristallin","text":"<ul> <li>Photovoltaik \u00dcbersicht</li> </ul>"},{"location":"tags.html#mp4","title":"mp4","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#natur","title":"natur","text":"<ul> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#openzfs","title":"openzfs","text":"<ul> <li>Delete Old ZFS Snapshots</li> <li>OpenZFS With HSM Encryption</li> <li>ZFS Clone Snapshots</li> </ul>"},{"location":"tags.html#pdf","title":"pdf","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#pflanze","title":"pflanze","text":"<ul> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#photovoltaik","title":"photovoltaik","text":"<ul> <li>Photovoltaik \u00dcbersicht</li> </ul>"},{"location":"tags.html#polykristallin","title":"polykristallin","text":"<ul> <li>Photovoltaik \u00dcbersicht</li> </ul>"},{"location":"tags.html#prune","title":"prune","text":"<ul> <li>Delete Old ZFS Snapshots</li> </ul>"},{"location":"tags.html#python3","title":"python3","text":"<ul> <li>Delete Old ZFS Snapshots</li> </ul>"},{"location":"tags.html#qr","title":"qr","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#qrcode","title":"qrcode","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#rename","title":"rename","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#rezept","title":"rezept","text":"<ul> <li>Rezept Kn\u00e4ckebrot</li> </ul>"},{"location":"tags.html#s3","title":"s3","text":"<ul> <li>Backup To AWS S3 Deep Archive</li> </ul>"},{"location":"tags.html#scanner","title":"scanner","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#security","title":"security","text":"<ul> <li>Firefox And SelfCA</li> <li>Security Notes</li> </ul>"},{"location":"tags.html#selfca","title":"selfca","text":"<ul> <li>Firefox And SelfCA</li> </ul>"},{"location":"tags.html#selfsigned","title":"selfsigned","text":"<ul> <li>Firefox And SelfCA</li> </ul>"},{"location":"tags.html#solarzellen","title":"solarzellen","text":"<ul> <li>Photovoltaik \u00dcbersicht</li> </ul>"},{"location":"tags.html#terminal","title":"terminal","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#tier","title":"tier","text":"<ul> <li>Merks\u00e4tze Natur, Tiere Und Pflanzen</li> </ul>"},{"location":"tags.html#video","title":"video","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#wechselrichter","title":"wechselrichter","text":"<ul> <li>Photovoltaik \u00dcbersicht</li> </ul>"},{"location":"tags.html#windows","title":"windows","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#wolfcrypt","title":"wolfcrypt","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#wolfssl","title":"wolfssl","text":"<ul> <li>ESP-IDF with WolfSSL</li> </ul>"},{"location":"tags.html#yt-dlp","title":"yt-dlp","text":"<ul> <li>Commands Collection</li> </ul>"},{"location":"tags.html#zfs","title":"zfs","text":"<ul> <li>Delete Old ZFS Snapshots</li> <li>OpenZFS With HSM Encryption</li> <li>ZFS Clone Snapshots</li> </ul>"}]}